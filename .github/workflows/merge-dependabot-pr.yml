name: Merge dependabot pr
on:
  workflow_call:

jobs:
  merge-pullrequests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v6
        with:
          script: |
            const today = new Date();
            const sommerStart = new Date(today.getFullYear(), 5, 20);
            const sommerSlutt = new Date(today.getFullYear(), 7, 7);
            const julStart = new Date(today.getFullYear(), 11, 20);
            const julSlutt = new Date(today.getFullYear(), 11, 31);
            const nyttaarStart = new Date(today.getFullYear(), 0, 1);
            const nyttaarSlutt = new Date(today.getFullYear(), 0, 5);

            // Opprett en ny liste for PRer som ikke er foran.
            const prNotAheadList = [];

            // Hent siste commiten i master-branchen.
            const masterCommitResponse = await github.request('GET /repos/{owner}/{repo}/commits/master', {
               owner: context.repo.owner,
                repo: context.repo.repo,
             });
            const masterLatestCommitSha = masterCommitResponse.data.sha;

            if ((today >= sommerStart && today <= sommerSlutt) || (today >= julStart && today <= julSlutt) || (today >= nyttaarStart && today <= nyttaarSlutt)) {
                console.log('Skriptet kjører ikke i ferier');
                return;
            }


            const pulls = await github.request('GET /repos/{owner}/{repo}/pulls', {
                owner: context.repo.owner,
                repo: context.repo.repo,
            })

            const filtrert = pulls.data
                .filter((it) => it.state == 'open')
                .filter((it) => !it.head.repo.fork)
                .filter((it) => it.labels.some((l) => l.name == 'automerge'))
                .filter((it) => {
                    const prCreated = new Date(it.created_at)
                    if (it.title.includes('navikt') || it.title.includes('aksel')) {
                      const twoDays = 2 * 60 * 60 * 1000
                      return prCreated.getTime() < Date.now() - twoDays
                    }
                    const oneWeek = 7 * 24 * 60 * 60 * 1000
                    return prCreated.getTime() < Date.now() - oneWeek
                })
                .map((it) => {
                    return {
                        title: it.title,
                        number: it.number,

                    }
                })
                .filter(async (it) => {
                   const prLastCommit = it.head.sha;

                   if (prLastCommit === masterLatestCommitSha) {
                      prNotAheadList.push(it);  // Legg PRen til vår liste hvis den ikke er foran.
                      return false;
                   }

                    const comparison = await github.request('GET /repos/{owner}/{repo}/compare/{base}...{head}', {
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    base: masterLatestCommitSha,
                    head: prLastCommit,
                 });

                 if (comparison.data.status !== 'ahead') {
                    prNotAheadList.push(it);  // Legg PRen til vår liste hvis den ikke er foran.
                    return false;
                 }

                return true;  // Hvis PRen er foran, beholder vi den i listen vår.
                })
                .map(async (it) => {
                    const QUERY = `query($owner: String!, $repo: String!, $pull_number: Int!) {
                                          repository(owner: $owner, name:$repo) {
                                            pullRequest(number:$pull_number) {
                                              commits(last: 1) {
                                                nodes {
                                                  commit {
                                                    statusCheckRollup {
                                                      state
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }`

                    const result = await github.graphql(QUERY, {
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        pull_number: it.number,
                    })
                    const [{ commit: lastCommit }] =
                        result.repository.pullRequest.commits.nodes

                    return {
                        title: it.title,
                        number: it.number,
                        checksOk: lastCommit.statusCheckRollup?.state === 'SUCCESS',
                    }
                })

            const allePrs = await Promise.all(filtrert)
            const medMergeablePromise = allePrs
                .filter((it) => it.checksOk)
                .map(async (it) => {
                    const prdata = await github.request('GET /repos/{owner}/{repo}/pulls/{pull_number}', {
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        pull_number: it.number
                    })
                    return {
                        title: it.title,
                        number: it.number,
                        mergeable: prdata.data.mergeable
                    }
                })
            const medMergeable = await Promise.all(medMergeablePromise)
            if (medMergeable.length > 0) {
                const pr = medMergeable[0]
                console.log('Merger PR', pr.title)
                await github.request('PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge', {
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: pr.number,
                    merge_method: 'squash'
                })
                console.log('Starter master workflow')

                await github.request(
                    'POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches',
                    {
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        workflow_id: 'workflow.yml',
                        ref: 'master',
                    }
                )
            } else {
                console.log('Ingen PRer å merge')
            }
            // Etter filtrering, legg til en kommentar til PRer som ikke er foran.
            for (const pr of prNotAheadList) {
              await github.request('POST /repos/{owner}/{repo}/issues/{issue_number}/comments', {
                 owner: context.repo.owner,
                 repo: context.repo.repo,
                 issue_number: pr.number,  // GitHub behandler PR-nummer som issue-nummer for kommentar-APIet.
                 body: '@dependabot rebase'
              });
            }
