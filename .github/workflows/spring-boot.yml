# Apper som bruker denne https://github.com/search?q=org%3Anavikt+flex-github-actions-workflows+language%3AYAML&type=Code

name: Spring boot
on:
  workflow_call:
    inputs:
      app:
        required: true
        type: string

env:
  APP:  ${{ inputs.app }}

jobs:
  build-and-publish:
    name: Bygg, test og push Docker image
    runs-on: ubuntu-latest
    steps:
      - name: Setup java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Generer versjon og image navn
        run: |
          TIME=$(TZ="Europe/Oslo" date +%Y.%m.%d-%H.%M)
          COMMIT=$(git rev-parse --short=8 HEAD)
          VERSION=$TIME-$COMMIT
          echo "IMAGE=ghcr.io/navikt/$APP:$VERSION" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - run: echo $VERSION > VERSION.txt
      - name: Last opp VERSION til neste job
        uses: actions/upload-artifact@v3
        with:
          name: VERSION.txt
          path: VERSION.txt
      - name: Gradle wrapper validation
        uses: gradle/wrapper-validation-action@v1
      - uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-cache-${{ hashFiles('build.gradle.kts') }}
          restore-keys: |
            ${{ runner.os }}-gradle-cache-
      - uses: actions/cache@v3
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-wrapper-
      - name: Lint koden
        env:
          ORG_GRADLE_PROJECT_githubUser: x-access-token
          ORG_GRADLE_PROJECT_githubPassword: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ./gradlew ktlintCheck
      - name: Run tests
        env:
          ORG_GRADLE_PROJECT_githubUser: x-access-token
          ORG_GRADLE_PROJECT_githubPassword: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ./gradlew test
      - name: Build jar
        env:
          ORG_GRADLE_PROJECT_githubUser: x-access-token
          ORG_GRADLE_PROJECT_githubPassword: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ./gradlew bootJar -x test
      - name: Build and publish Docker image
        if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/dev-')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          docker build -t ${IMAGE} .
          echo ${GITHUB_TOKEN} | docker login ghcr.io --username ${GITHUB_REPOSITORY} --password-stdin
          docker push ${IMAGE}
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        if: github.ref == 'refs/heads/master'
        env:
            SLACK_COLOR: '#ff0000'
            SLACK_MESSAGE: ${{ inputs.app }} bygget feiler pÃ¥ master (TESTING TESTING)
            SLACK_TITLE: ':broken_heart:'
            SLACK_WEBHOOK: ${{ secrets.SPOKELSER_WEBHOOK }}

  snyk-monitor-gradle:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/gradle-jdk17@7fad562681122205233d1242c3bb39598c5393da
        env:
          ORG_GRADLE_PROJECT_githubUser: x-access-token
          ORG_GRADLE_PROJECT_githubPassword: ${{ secrets.GITHUB_TOKEN }}
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor
          args: --org=flex-kmy --project-name=${{ github.repository }} --remote-repo-url=https://github.com/${{ github.repository }}.git

  snyk-test-gradle:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/gradle-jdk17@7fad562681122205233d1242c3bb39598c5393da
        env:
          ORG_GRADLE_PROJECT_githubUser: x-access-token
          ORG_GRADLE_PROJECT_githubPassword: ${{ secrets.GITHUB_TOKEN }}
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test
          args: --org=flex-kmy --severity-threshold=high --project-name=${{ github.repository }} --remote-repo-url=https://github.com/${{ github.repository }}.git

  snyk-monitor-docker:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: build-and-publish
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Last ned versjon
        uses: actions/download-artifact@v3
        with:
          name: VERSION.txt
          path: .
      - run: echo "VERSION=`cat VERSION.txt`" >> $GITHUB_ENV
      - run: echo "IMAGE=ghcr.io/navikt/$APP:$VERSION" >> $GITHUB_ENV
      - name: Run Snyk to check Docker images for vulnerabilities
        uses: snyk/actions/docker@7fad562681122205233d1242c3bb39598c5393da
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor
          image: ${{ env.IMAGE }}
          args: --org=flex-kmy --severity-threshold=high --project-name=${{ github.repository }}

  snyk-test-docker:
    if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/dev-')
    runs-on: ubuntu-latest
    needs: build-and-publish
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Last ned versjon
        uses: actions/download-artifact@v3
        with:
          name: VERSION.txt
          path: .
      - run: echo "VERSION=`cat VERSION.txt`" >> $GITHUB_ENV
      - run: echo "IMAGE=ghcr.io/navikt/$APP:$VERSION" >> $GITHUB_ENV
      - name: Run Snyk to check Docker images for vulnerabilities
        uses: snyk/actions/docker@7fad562681122205233d1242c3bb39598c5393da
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test
          image: ${{ env.IMAGE }}
          args: --org=flex-kmy --severity-threshold=high --project-name=${{ github.repository }} --remote-repo-url=https://github.com/${{ github.repository }}.git

  deploy-to-dev-gcp:
    if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/dev-')
    name: Deploy til dev-gcp
    runs-on: ubuntu-latest
    needs: build-and-publish
    concurrency: deploy-to-dev-gcp
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Last ned versjon
        uses: actions/download-artifact@v3
        with:
          name: VERSION.txt
          path: .
      - run: echo "VERSION=`cat VERSION.txt`" >> $GITHUB_ENV
      - run: echo "IMAGE=ghcr.io/navikt/$APP:$VERSION" >> $GITHUB_ENV
      - uses: nais/deploy/actions/deploy@v1
        name: Deploy to dev-gcp
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: dev-gcp
          RESOURCE: nais/app/naiserator.yaml
          VARS: nais/app/dev.yaml

  deploy-to-prod-gcp:
    if: github.ref == 'refs/heads/master'
    name: Deploy til prod-gcp (Produksjon)
    runs-on: ubuntu-latest
    needs: build-and-publish
    concurrency: deploy-to-prod-gcp
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Last ned versjon
        uses: actions/download-artifact@v3
        with:
          name: VERSION.txt
          path: .
      - run: echo "VERSION=`cat VERSION.txt`" >> $GITHUB_ENV
      - run: echo "IMAGE=ghcr.io/navikt/$APP:$VERSION" >> $GITHUB_ENV
      - uses: nais/deploy/actions/deploy@v1
        name: Deploy to prod-gcp
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: prod-gcp
          RESOURCE: nais/app/naiserator.yaml
          VARS: nais/app/prod.yaml
